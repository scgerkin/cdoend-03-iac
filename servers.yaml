Description: >
    Server Infrastructure / UdagramTestEnvironment /

Parameters:
    # NOTE: All IP ranges should be written in CIDR notation (#.#.#.#/#)
    EnvironmentName:
        Description: Environment name to be prefixed to resource names.
        Type: String
    JumpBoxAllowedCidr:
        Description: The IP address allowed to SSH into a Jump Box EC2 instance running within a public subnet allowing access to servers in a private subnet.
        Type: String
    WebServerImageId:
        Description: Fully qualified ami image id.
        Type: String
    WebServerInstanceType:
        Description: The instance type to use for the web servers. (t3.medium preferred)
        Type: String

Resources:
### SECURITY GROUPS ###
    JumpBoxSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Jump Box / For accessing servers on private subnet. Only allow Port 22 for SSH on ingress. Allow all egress for updating.
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: !Ref JumpBoxAllowedCidr
            SecurityGroupEgress:
              - IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: !Ref JumpBoxAllowedCidr
              - IpProtocol: tcp
                FromPort: 0
                ToPort: 65535
                CidrIp: 0.0.0.0/0

    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Load Balancer / Allow all TCP on port 80 (HTTP) for ingress and egress.
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0

    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow HTTP and SSH on Network only, Any Outbound traffic.
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 10.0.0.0/24
              - IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: 10.0.0.0/24
            SecurityGroupEgress:
              - IpProtocol: tcp
                FromPort: 0
                ToPort: 65535
                CidrIp: 0.0.0.0/0

### JUMP BOX INSTANCE ###
    JumpBoxInstance:
        Type: AWS::EC2::Instance
        Properties:
            InstanceType: t3.nano
            ImageId: ami-0ce21b51cb31a48b8 # Amazon Linux 2 AMI 64-Bit x86
            SubnetId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-PUB1-SN"
            KeyName: jumpbox-key
            SecurityGroupIds:
              - Ref: JumpBoxSecGroup
            IamInstanceProfile: Udagram-EC2-S3-ReadOnly
            InstanceInitiatedShutdownBehavior: "stop"
            BlockDeviceMappings:
              - DeviceName: "/dev/sdk"
                Ebs:
                    VolumeSize: '10'
            Tags:
              - Key: Name
                Value: JumpBox
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    yum update -y
                    cd /home/ec2-user
                    aws s3 cp s3://udagram-test-environment/keys/private-server-devops-key.pem private-server-devops-key.pem
                    chmod 400 private-server-devops-key.pem
                    chown ec2-user private-server-devops-key.pem

### AUTO-SCALING WEB SERVERS & LOAD BALANCER ###
    WebServerLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            ImageId: !Ref WebServerImageId
            SecurityGroups:
              - Ref: WebServerSecGroup
            IamInstanceProfile: Udagram-EC2-S3-ReadOnly
            InstanceType: !Ref WebServerInstanceType
            BlockDeviceMappings:
              - DeviceName: "/dev/sdk"
                Ebs:
                    VolumeSize: 10
                    VolumeType: gp2
    # Uncomment this to enable SSH into WebServer instances from JumpBox
            KeyName: private-server-devops-key
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    apt-get update -y
                    apt install apache2 -y
                    apt systemctl start apache2.service
                    apt install awscli -y
                    apt install unzip -y
                    cd /var/www
                    rm -rf html
                    mkdir html
                    cd html
                    aws s3 cp s3://udagram-test-environment/udagram.zip udagram.zip
                    unzip udagram.zip
                    rm udagram.zip
                    chown -R ubuntu *

    WebServerGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
              - Fn::ImportValue:
                    !Sub "${EnvironmentName}-PRIV-NETS"
            LaunchConfigurationName:
                Ref: WebServerLaunchConfig
            MinSize: '2'
            MaxSize: '6'
            TargetGroupARNs:
              - Ref: WebServerTargetGroup

    WebServerLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
              - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
              - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
            SecurityGroups:
              - Ref: LBSecGroup

### LB LISTENERS ###
    LBListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            LoadBalancerArn: !Ref WebServerLB
            DefaultActions:
              - Type: forward
                TargetGroupArn:
                    Ref: WebServerTargetGroup
            Port: '80'
            Protocol: HTTP

    LBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
              - Type: forward
                TargetGroupArn: !Ref 'WebServerTargetGroup'
            Conditions:
              - Field: path-pattern
                Values: [/]
            ListenerArn: !Ref LBListener
            Priority: 1

### TARGET GROUP: HEALTH QUALIFIERS ###
    WebServerTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            TargetGroupAttributes:
              - Key: slow_start.duration_seconds
                Value: 120
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId:
                Fn::ImportValue:
                    Fn::Sub: "${EnvironmentName}-VPCID"

Outputs:
    LoadBalancerDnsName:
        Description: The DNS name created for the load balancer. Routing should resolve to this.
        Value: !Join ["", ["http://", !GetAtt WebServerLB.DNSName]]
        Export:
            Name: !Sub "${EnvironmentName}-LBDNS"
